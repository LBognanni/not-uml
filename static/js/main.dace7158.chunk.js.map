{"version":3,"sources":["services/parsertypes.ts","services/converter.ts","services/parser.ts","services/svg.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElementType","moveItems","items","dx","dy","item","x","y","next","measureAndMoveItems","box","left","top","bottom","right","directChildren","Math","min","max","width","height","length","push","allChildrenHeight","reduce","prev","cur","moveUpDown","moveLeft","childGroup","newSize","measureAll","underling","elementsToItems","elements","current_y","element","size","text","type","children","View","subItems","convert","createElement","line","startsWith","substring","trimStart","Action","extractElements","lines","trim","spaces","match","findAllElements","split","root","Root","rootItem","previousItems","filter","shift","unshift","mergeElements","itemToSvg","horizontalLine","dash","arrow","x1","y1","x2","y2","cp1","cp2","groupToSvg","childItemGroups","previousType","lineWidth","nextView","find","itemsToSvg","join","App","useState","updateText","svg","updateSvg","svgWidth","updateSvgWidth","svgBlob","updateSvgBlob","convertSvg","result","convertToSvg","data","Blob","url","window","URL","createObjectURL","className","value","onChange","e","target","id","style","dangerouslySetInnerHTML","__html","title","download","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8JAAKA,E,sEAAW,SAAXA,OAAW,eAAXA,IAAW,eAAXA,IAAW,oBAAXA,MAAW,KCsBhB,SAASC,EAAUC,EAAkBC,EAAYC,GAAa,IAClC,EADiC,cACtCF,GAAK,IAAxB,2BAA0B,CAAC,IAAhBG,EAAI,QACXA,EAAKC,GAAKH,EACVE,EAAKE,GAAKH,EACVH,EAAUI,EAAKG,KAAML,EAAIC,EAC7B,CAAC,+BACL,CAEA,SAASK,EAAoBP,GACzB,IAQwB,EARpBQ,EAAmB,CACnBC,KAAM,QACNC,IAAK,QACLC,QAAS,QACTC,OAAQ,SAERC,EAAiB,GAAG,cAELb,GAAK,IAAxB,2BAA0B,CAAC,IAAhBG,EAAI,QACXK,EAAIC,KAAOK,KAAKC,IAAIP,EAAIC,KAAMN,EAAKC,GACnCI,EAAIE,IAAMI,KAAKC,IAAIP,EAAIE,IAAKP,EAAKE,GACjCG,EAAII,MAAQE,KAAKE,IAAIR,EAAII,MAAOT,EAAKc,MAAQd,EAAKC,GAClDI,EAAIG,OAASG,KAAKE,IAAIb,EAAKe,OAASf,EAAKE,EAAGG,EAAIG,QAE5CR,EAAKG,KAAKa,QACVN,EAAeO,KAAK,CAChBpB,MAAOG,EAAKG,KACZE,IAAKD,EAAoBJ,EAAKG,OAG1C,CAAC,+BAED,GAAIO,EAAeM,OAAQ,CACvB,IASuC,EATjCE,EACFR,EAAeS,QAAO,SAACC,EAAMC,GACzB,OAAOD,EAAOC,EAAIhB,IAAIG,OAASa,EAAIhB,IAAIE,GAC3C,GAAG,GAhDE,IAiDJG,EAAeM,OAAS,GAEzBM,GAAcjB,EAAIE,IAAMF,EAAIG,QAAU,EAAKU,EAAoB,EAC7DK,EAAWlB,EAAII,MAnDZ,IAmD6B,cAEbC,GAAc,IAAvC,2BAAyC,CAAC,IAA/Bc,EAAU,QACjB5B,EAAU4B,EAAW3B,MAAO0B,EAAUD,GAEtCA,GAA2BE,EAAWnB,IAAIG,OAASgB,EAAWnB,IAAIE,IAzD7D,GA2DL,IAAMkB,EAAUC,EAAWF,EAAW3B,OACtCQ,EAAIC,KAAOK,KAAKC,IAAIP,EAAIC,KAAMmB,EAAQnB,MACtCD,EAAIE,IAAMI,KAAKC,IAAIP,EAAIE,IAAKkB,EAAQlB,KACpCF,EAAII,MAAQE,KAAKE,IAAIR,EAAII,MAAOgB,EAAQhB,OACxCJ,EAAIG,OAASG,KAAKE,IAAIR,EAAIG,OAAQiB,EAAQjB,OAC9C,CAAC,+BACL,CAEA,OAAOH,CACX,CAEA,SAASqB,EAAW7B,GAChB,IAOuB,EAPjBQ,EAAM,CACRC,KAAM,MACNC,IAAK,MACLE,OAAQ,MACRD,QAAS,OACZ,cAEiBX,GAAK,IAAvB,IAAI,EAAJ,qBACA,CAAC,IADSG,EAAI,QAEJ2B,EAAYD,EAAW1B,EAAKG,MAClCE,EAAIC,KAAOK,KAAKC,IAAIP,EAAIC,KAAMN,EAAKC,EAAG0B,EAAUrB,MAChDD,EAAIE,IAAMI,KAAKC,IAAIP,EAAIE,IAAKP,EAAKE,EAAGyB,EAAUpB,KAC9CF,EAAII,MAAQE,KAAKE,IAAIR,EAAII,MAAOT,EAAKC,EAAID,EAAKc,MAAOa,EAAUlB,OAC/DJ,EAAIG,OAASG,KAAKE,IAAIR,EAAIG,OAAQR,EAAKE,EAAIF,EAAKe,OAAQY,EAAUnB,OACtE,CAAC,+BAED,OAAOH,CACX,CAEA,SAASuB,EAAgB1B,EAAW2B,GAChC,IAG8B,EAH1BhC,EAAmB,GACnBiC,EAAY5B,EAAE,cAEI2B,GAAQ,IAA9B,2BAAgC,CAAC,IAAtBE,EAAO,QACRC,EAxFH,CACHlB,MANW,EA6FgBiB,EAAQE,KAvFVjB,OACzBD,OANY,IA6FRf,EAAgB,CAChBiC,KAAMF,EAAQE,KACdC,KAAMH,EAAQG,KACdjC,EAAG,EACHC,EAAG4B,EACHhB,MAAOkB,EAAKlB,MACZC,OAAQiB,EAAKjB,OACbZ,KAAM,IAKV,GAHA2B,GAAaE,EAAKjB,OAClBlB,EAAMoB,KAAKjB,GAEP+B,EAAQI,SACR,GAAInC,EAAKkC,OAASvC,EAAYyC,KAAM,CAChC,IAAMC,EAAWT,EAAgBE,EAAWC,EAAQI,UACpDtC,EAAMoB,KAAI,MAAVpB,EAAK,YAASwC,GAClB,KAAO,CACH,IAAMA,EAAWT,EAAgB,EAAGG,EAAQI,UAC5CnC,EAAKG,KAAOkC,CAChB,CAER,CAAC,+BAED,OAAOxC,CACX,CAEA,SAASyC,EAAQT,GAEb,IAAMhC,EAAQ+B,EAAgB,EAAGC,GAEjC,MAAO,CAAEhC,QAAOQ,IADJD,EAAoBP,GAEpC,CCjIA,SAAS0C,EAAcC,GACnB,OAAIA,EAAKC,WAAW,MACT,CACHR,KAAMO,EAAKE,UAAU,GAAGC,YACxBT,KAAMvC,EAAYiD,OAClBT,SAAU,IAEPK,EAAKC,WAAW,OAChB,CACHR,KAAMO,EAAKE,UAAU,GAAGC,YACxBT,KAAMvC,EAAYyC,KAClBD,SAAU,IAIX,CACHF,KAAMO,EACNN,KAAMvC,EAAYyC,KAClBD,SAAU,GAElB,CAqCA,SAASU,EAAgBZ,GACrB,IAEMJ,EAtCV,SAAyBiB,GACrB,IAEwB,EAFlBjB,EAAW,GAAG,cAEDiB,GAAK,IAAxB,2BAA0B,CAAC,IAAD,IAAfN,EAAI,QACX,GAAoB,KAAhBA,EAAKO,OAAT,CAEA,IAAMC,EAA+C,QAAzC,GAAsB,QAAnB,EAACR,EAAKS,MAAM,eAAO,QAAI,CAAC,KAAK,GAAGjC,cAAM,QAAI,EACnDe,EAAUQ,EAAcC,EAAKO,QAEnClB,EAASZ,KAAK,CAAE+B,SAAQjB,WALQ,CAMpC,CAAC,+BAED,OAAOF,CACX,CAyBqBqB,CAFHjB,EAAKkB,MAAM,OAIzB,OAzBJ,SAAuBtD,GACnB,IAQwB,EARlBuD,EAAgB,CAClBnB,KAAM,SACNC,KAAMvC,EAAY0D,KAClBlB,SAAU,IAERmB,EAAW,CAAEN,OAAQ,EAAGjB,QAASqB,GAEnCG,EAAoC,CAACD,GAAU,cAChCzD,GAAK,6BAAbG,EAAI,SAEqD,QADtD,EAC6C,QAD7C,EACNuD,EAAcC,QAAO,SAACvD,GAAC,OAAKA,EAAE+C,OAAShD,EAAKgD,MAAM,WAAC,aAAnD,EAAqDS,eAAO,QAC5DH,GACGvB,QAAQI,SAASlB,KAAKjB,EAAK+B,SAClCwB,EAAcG,QAAQ1D,EAAM,EALhC,2BAA2B,GAM1B,+BAED,OAAOoD,CACX,CAOWO,CAAc9B,GAAUM,QACnC,CClEA,SAASyB,EAAU5D,GACf,MAAM,gBAAN,OAAuBA,EAAKkC,OAASvC,EAAYyC,KAAO,OAAS,SAAQ,4CAAqCpC,EAAKC,EAAC,gBAAQD,EAAKE,EAAC,4BAAoBF,EAAKiC,KAAI,UACnK,CAEA,SAAS4B,EAAe5D,EAAWC,EAAWY,EAAegD,GACzD,MAAM,aAAN,OAAoB7D,EAAC,YAAIC,EAAC,aAAKY,EAAK,0BAAkBgD,EAAO,0BAA4B,GAAE,kCAC/F,CAEA,SAASC,EAAMC,EAAYC,EAAYC,EAAYC,GAC/C,IACIC,EAA0B,IAAlBF,EAAKF,EAAKlE,IAClBuE,EAA0B,IAAlBH,EAAKF,EAAKlE,IACtB,MAAM,aAAN,OAAoBkE,EAAE,YAAIC,EAAE,cAHjB,EAGyB,cAAMG,EAAG,IAAI,EAAC,YAAIC,EAAG,YAAIF,EAAGF,EAAE,YAAIC,EAAGF,EAAGlE,GAAI,YAAIqE,EAAGF,EAAE,cAH9E,EAGsF,+EACrG,CAEA,SAASK,EAAWzE,GAChB,IAAM0E,EAAkB,GACpBzB,EAAQ,GACR0B,EAA6B7E,EAAY0D,KACvCoB,EAAY5E,EAAMsB,QAAO,SAACC,EAAMnB,GAAC,OAAGU,KAAKE,IAAIO,EAAMnB,EAAEa,MAAM,GAAE,GAEnE,GAAIjB,EAAMmB,OAAQ,CACd8B,EAAM7B,KAAK,OAAO,IAEM,EAFN,cAECpB,GAAK,IAAxB,2BAA0B,CAAC,IAAhBG,EAAI,QAEX,OAAQwE,GACJ,KAAK7E,EAAYyC,KACbU,EAAM7B,KACF4C,EACI7D,EAAKC,EACLD,EAAKE,EAAI,GACTuE,GACA,IAGR,MACJ,KAAK9E,EAAYiD,OACbE,EAAM7B,KACF4C,EACI7D,EAAKC,EACLD,EAAKE,EAAI,GACTuE,GACA,IAShB,GAHA3B,EAAM7B,KAAK2C,EAAU5D,IACrBwE,EAAexE,EAAKkC,KAEhBlC,EAAKG,KAAM,CACX,IAAIuE,EAAU1E,EAAKG,KAAKwE,MAAK,SAAA1E,GAAC,OAAEA,EAAEiC,OAASvC,EAAYyC,IAAI,IACxDsC,GAEC5B,EAAM7B,KAAK8C,EAAM/D,EAAKC,EAAIwE,EAAY,EAAGzE,EAAKE,EAAI,EAAGwE,EAASzE,EAAI,GAAIyE,EAASxE,EAAI,IAEvFqE,EAAgBtD,KAAKjB,EAAKG,KAC9B,CACJ,CAAC,+BAED2C,EAAM7B,KAAK,QAAQ,IAEqB,EAFrB,cAEMsD,GAAe,IAAxC,2BAA0C,CAAC,IAAhC/C,EAAU,QACjBsB,EAAM7B,KAAI,MAAV6B,EAAK,YAASwB,EAAW9C,IAC7B,CAAC,+BACL,CACA,OAAOsB,CACX,CAEA,SAAS8B,EAAW/E,GAEhB,OADUyE,EAAWzE,GACVgF,KAAK,KACpB,C,WC5BeC,MA9Cf,WAEE,MAA2BC,mBAAS,kFAIpC,mBAJO9C,EAAI,KAAE+C,EAAU,KAKvB,EAAyBD,mBAAS,IAAG,mBAA9BE,EAAG,KAAEC,EAAS,KACrB,EAAmCH,mBAAS,KAAI,mBAAzCI,EAAQ,KAAEC,EAAc,KAC/B,EAAiCL,mBAAS,IAAG,mBAAtCM,EAAO,KAAEC,EAAa,KAE7B,SAASC,EAAWtD,GAClB+C,EAAW/C,GACX,IAAMuD,ED+DV,SAAsBvD,GAClB,IACA,EAAqBK,EADJO,EAAgBZ,IAC1BpC,EAAK,EAALA,MAAOQ,EAAG,EAAHA,IAmBd,MAAO,CAAE4E,IAlBO,2DAAuD5E,EAAIC,KAAI,YAAID,EAAIE,IAAG,YAAIF,EAAII,MAAQJ,EAAIC,KAAI,YAAID,EAAIG,OAASH,EAAIE,IAAG,gRAe5IqE,EAAW/E,GAAM,YAGWQ,IAAKA,EACnC,CCrFmBoF,CAAaxD,GAC5BiD,EAAUM,EAAOP,KACjBG,EAAeI,EAAOnF,IAAII,OAE1B,IAAIiF,EAAO,IAAIC,KAAK,CAACH,EAAOP,KAAM,CAAC/C,KAAM,kBACrC0D,EAAMC,OAAOC,IAAIC,gBAAgBL,GACrCJ,EAAcM,EAChB,CAEA,OACE,sBAAKI,UAAU,MAAK,UAElB,sBAAKA,UAAU,OAAM,UACnB,yCACA,sEAGF,0BAAUC,MAAOhE,EAAMiE,SAAU,SAACC,GAAC,OAAKZ,EAAWY,EAAEC,OAAOH,MAAM,IAClE,sBAAKI,GAAG,eAAc,UACpB,wCACA,8BAAG,sCAAY,gBAAa,sCAAkB,OAC9C,8BAAG,wCAAc,gBAAa,qCAAc,OAC5C,kJAGF,qBAAKL,UAAU,kBAAiB,SAC9B,qBAAKM,MAAO,CAACxF,MAAOqE,EAAW,MAAOoB,wBAAyB,CAAEC,OAAQvB,OAE3E,mBAAGwB,MAAM,eAAeJ,GAAG,kBAAkBK,SAAS,YAAYC,KAAMtB,EAAQ,SAAC,gDAGvF,EClCeuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECNAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.dace7158.chunk.js","sourcesContent":["enum ElementType {\n    Root,\n    View,\n    Action,\n}\n\ninterface Element {\n    text: string;\n    type: ElementType;\n    children: Element[];\n}\n\ninterface SvgItem {\n    text: string;\n    type: ElementType;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    next: SvgItem[];\n}\n\ninterface Size {\n    width: number;\n    height: number;\n}\n\ninterface BoundingBox {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n}\n\ninterface ItemsWithBox {\n    items: SvgItem[];\n    box: BoundingBox;\n}\n\nexport { ElementType };\nexport type { Element, SvgItem, Size, BoundingBox, ItemsWithBox };\n","import {\n    ElementType,\n    Element,\n    SvgItem,\n    Size,\n    BoundingBox,\n    ItemsWithBox,\n} from \"./parsertypes\";\n\nconst vspacing = 20;\nconst hspacing = 100;\nconst char_width = 8;\nconst line_height = 30;\n\nfunction measureString(text: string): Size {\n\n    return {\n        width: char_width * text.length,\n        height: line_height,\n    };\n}\n\nfunction moveItems(items: SvgItem[], dx: number, dy: number) {\n    for (const item of items) {\n        item.x += dx;\n        item.y += dy;\n        moveItems(item.next, dx, dy);\n    }\n}\n\nfunction measureAndMoveItems(items: SvgItem[]): BoundingBox {\n    let box: BoundingBox = {\n        left: 9999999,\n        top: 9999999,\n        bottom: -9999999,\n        right: -9999999,\n    };\n    let directChildren = [];\n\n    for (const item of items) {\n        box.left = Math.min(box.left, item.x);\n        box.top = Math.min(box.top, item.y);\n        box.right = Math.max(box.right, item.width + item.x);\n        box.bottom = Math.max(item.height + item.y, box.bottom);\n\n        if (item.next.length) {\n            directChildren.push({\n                items: item.next,\n                box: measureAndMoveItems(item.next),\n            });\n        }\n    }\n\n    if (directChildren.length) {\n        const allChildrenHeight =\n            directChildren.reduce((prev, cur) => {\n                return prev + cur.box.bottom - cur.box.top;\n            }, 0) +\n            (directChildren.length - 1) * vspacing;\n\n        let moveUpDown = (box.top + box.bottom) / 2 - (allChildrenHeight / 2);\n        const moveLeft = box.right + hspacing;\n\n        for (const childGroup of directChildren) {\n            moveItems(childGroup.items, moveLeft, moveUpDown);\n\n            moveUpDown +=  vspacing + (childGroup.box.bottom - childGroup.box.top);\n\n            const newSize = measureAll(childGroup.items);\n            box.left = Math.min(box.left, newSize.left);\n            box.top = Math.min(box.top, newSize.top);\n            box.right = Math.max(box.right, newSize.right);\n            box.bottom = Math.max(box.bottom, newSize.bottom);\n        }\n    }\n\n    return box;\n}\n\nfunction measureAll(items: SvgItem[]) {\n    const box = {\n        left: 99999,\n        top: 99999,\n        right: -99999,\n        bottom: -99999\n    }\n\n    for(const item of items)\n    {\n        const underling = measureAll(item.next);\n        box.left = Math.min(box.left, item.x, underling.left);\n        box.top = Math.min(box.top, item.y, underling.top);\n        box.right = Math.max(box.right, item.x + item.width, underling.right);\n        box.bottom = Math.max(box.bottom, item.y + item.height, underling.bottom);\n    }\n\n    return box;\n}\n\nfunction elementsToItems(y: number, elements: Element[]) : SvgItem[]{\n    let items: SvgItem[] = [];\n    let current_y = y;\n\n    for (const element of elements) {\n        const size = measureString(element.text);\n        let item: SvgItem = {\n            text: element.text,\n            type: element.type,\n            x: 0,\n            y: current_y,\n            width: size.width,\n            height: size.height,\n            next: [],\n        };\n        current_y += size.height;\n        items.push(item);\n\n        if (element.children) {\n            if (item.type === ElementType.View) {\n                const subItems = elementsToItems(current_y, element.children);\n                items.push(...subItems);\n            } else {\n                const subItems = elementsToItems(0, element.children);\n                item.next = subItems;\n            }\n        }\n    }\n\n    return items;\n}\n\nfunction convert(elements: Element[]): ItemsWithBox {\n\n    const items = elementsToItems(0, elements)\n    const box = measureAndMoveItems(items);\n    return { items, box };\n}\n\nexport { convert, measureAndMoveItems, hspacing, vspacing, char_width, line_height };\n","import { ElementType, Element } from \"./parsertypes\";\n\ninterface ElementAndSpaces {\n    spaces: number;\n    element: Element;\n}\n\nfunction createElement(line: string): Element {\n    if (line.startsWith(\"- \")) {\n        return {\n            text: line.substring(2).trimStart(),\n            type: ElementType.Action,\n            children: [],\n        };\n    } else if (line.startsWith(\"-> \")) {\n        return {\n            text: line.substring(3).trimStart(),\n            type: ElementType.View,\n            children: [],\n        };\n    }\n\n    return {\n        text: line,\n        type: ElementType.View,\n        children: [],\n    };\n}\n\nfunction findAllElements(lines: string[]): ElementAndSpaces[] {\n    const elements = [];\n\n    for (const line of lines) {\n        if (line.trim() === \"\") continue;\n\n        const spaces = (line.match(/^\\s+/) ?? [\"\"])[0].length ?? 0;\n        const element = createElement(line.trim());\n\n        elements.push({ spaces, element });\n    }\n\n    return elements;\n}\n\nfunction mergeElements(items: ElementAndSpaces[]): Element {\n    const root: Element = {\n        text: \"[root]\",\n        type: ElementType.Root,\n        children: [],\n    };\n    const rootItem = { spaces: 0, element: root };\n\n    let previousItems: ElementAndSpaces[] = [rootItem];\n    for (const item of items) {\n        let parent =\n            previousItems.filter((x) => x.spaces < item.spaces)?.shift() ??\n            rootItem;\n        parent.element.children.push(item.element);\n        previousItems.unshift(item);\n    }\n\n    return root;\n}\n\nfunction extractElements(text: string): Element[] {\n    const lines = text.split(\"\\n\");\n\n    const elements = findAllElements(lines);\n\n    return mergeElements(elements).children;\n}\n\nexport { extractElements };\n","import { convert } from \"./converter\";\nimport { extractElements } from \"./parser\";\nimport { ElementType, SvgItem } from \"./parsertypes\";\n\nfunction itemToSvg(item: SvgItem): string {\n    return `<text class=\"${item.type === ElementType.View ? \"view\" : \"action\" }\" dominant-baseline=\"hanging\" x=\"${item.x}\" y=\"${item.y}\" font-size=\"10\">${item.text}</text>`;\n}\n\nfunction horizontalLine(x: number, y: number, width: number, dash: boolean) {\n    return `<path d=\"m${x} ${y} h${width}\" stroke=\"#000\"${dash ? ' stroke-dasharray=\"5,5\"' : \"\"} stroke-width=\"2\" fill=\"none\"/>`;\n}\n\nfunction arrow(x1: number, y1: number, x2: number, y2: number){\n    const dx = 5;\n    var cp1 =  (x2 - x1 - dx*2) * .8;\n    var cp2 =  (x2 - x1 - dx*2) * .2;\n    return `<path d=\"m${x1} ${y1} h ${dx} c ${cp1} ${0} ${cp2} ${y2-y1} ${x2-x1-dx*2} ${y2-y1} h ${dx}\" stroke=\"#000\" stroke-width=\"2\" fill=\"none\" marker-end=\"url(#arrowhead)\" />`;\n}\n\nfunction groupToSvg(items: SvgItem[]): string[] {\n    const childItemGroups = [];\n    let lines = [];\n    let previousType : ElementType = ElementType.Root;\n    const lineWidth = items.reduce((prev, x)=>Math.max(prev, x.width), 0);\n\n    if (items.length) {\n        lines.push(\"<g>\");\n\n        for (const item of items) {\n\n            switch (previousType) {\n                case ElementType.View:\n                    lines.push(\n                        horizontalLine(\n                            item.x,\n                            item.y - 10,\n                            lineWidth,\n                            false\n                        ),\n                    );\n                    break;\n                case ElementType.Action:\n                    lines.push(\n                        horizontalLine(\n                            item.x,\n                            item.y - 10,\n                            lineWidth,\n                            true\n                        ),\n                    );\n                    break;\n            }\n\n            lines.push(itemToSvg(item));\n            previousType = item.type;\n\n            if (item.next) {\n                var nextView =item.next.find(x=>x.type === ElementType.View);\n                if(nextView)\n                {\n                    lines.push(arrow(item.x + lineWidth + 8, item.y + 6, nextView.x - 10, nextView.y + 6));\n                }\n                childItemGroups.push(item.next);\n            }\n        }\n\n        lines.push(\"</g>\");\n\n        for (const childGroup of childItemGroups) {\n            lines.push(...groupToSvg(childGroup));\n        }\n    }\n    return lines;\n}\n\nfunction itemsToSvg(items: SvgItem[]): string {\n    let arr = groupToSvg(items);\n    return arr.join(\"\\n\");\n}\n\nfunction convertToSvg(text: string) {\n    const elements = extractElements(text);\n    const {items, box} = convert(elements);\n    const resultText = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"${box.left} ${box.top} ${box.right - box.left} ${box.bottom - box.top}\">\n<style>\ntext { \n    font: 10pt monospace;\n}\n.view {\n    font-weight: bold;\n}\n</style>\n<defs>\n<marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \nrefX=\"5\" refY=\"2.5\" orient=\"auto\">\n  <polygon points=\"0 0, 6 2.5, 0 5\" />\n</marker>\n</defs>\n${itemsToSvg(items)}\n</svg>`;\n\n    return { svg: resultText, box: box}\n}\n\nexport { convertToSvg, itemsToSvg };\n","import React, { useState } from \"react\";\nimport './App.css';\nimport { convertToSvg } from \"./services/svg\";\n\nfunction App() {\n\n  const [text, updateText] = useState(`What they see\n- What they do\n -> What they see next\n  - What they do next\n`);\n  const [svg, updateSvg] = useState(\"\");\n  const [svgWidth, updateSvgWidth] = useState(100);\n  const [svgBlob, updateSvgBlob] = useState(\"\");\n\n  function convertSvg(text: string){\n    updateText(text);\n    const result = convertToSvg(text);\n    updateSvg(result.svg)\n    updateSvgWidth(result.box.right);\n\n    var data = new Blob([result.svg], {type: 'image/svg+xml'});\n    var url = window.URL.createObjectURL(data);\n    updateSvgBlob(url);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"logo\">\n        <h1>not-uml</h1>\n        <p>A shorthand for designing UI flows</p>\n      </div>\n\n      <textarea value={text} onChange={(e) => convertSvg(e.target.value)}></textarea>\n      <div id=\"instructions\">\n        <h4>How to</h4>\n        <p><b>Views</b> start with \"<code>-&gt;</code>\"</p>\n        <p><b>Actions</b> start with \"<code>-</code>\"</p>\n        <p>Indent actions under the parent view. Indent views under actions when taking the action will lead to the view.</p>\n      </div>\n\n      <div className=\"chart-container\">\n        <div style={{width: svgWidth + \"px\"}} dangerouslySetInnerHTML={{ __html: svg }} />\n      </div>\n      <a title=\"Download SVG\" id=\"download-button\" download=\"chart.svg\" href={svgBlob}><span>Download</span></a>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}